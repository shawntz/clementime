<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Configuration - Clementime</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script
      src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"
      defer
    ></script>
    <style>
      [x-cloak] { display: none !important; }
    </style>
  </head>
  <body class="bg-orange-50">
    <%- include('partials/navbar') %>

    <div class="container mx-auto p-6" x-data="configPanel()">
      <div
        class="bg-white rounded-lg shadow-lg border border-orange-100 p-6 mb-6"
      >
        <h2 class="text-2xl font-bold mb-4">‚öôÔ∏è Configuration</h2>
        <p class="text-gray-600">View and manage system configuration</p>
      </div>

      <!-- Tab Navigation -->
      <div class="bg-white rounded-lg shadow-lg border border-orange-100 mb-6">
        <div class="border-b border-orange-100">
          <nav class="flex space-x-8 px-6" aria-label="Tabs">
            <button
              @click="activeTab = 'overview'"
              :class="activeTab === 'overview' ? 'border-orange-500 text-orange-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'"
              class="py-4 px-1 border-b-2 font-medium text-sm transition-colors"
            >
              Overview
            </button>
            <button
              @click="activeTab = 'filetree'"
              :class="activeTab === 'filetree' ? 'border-orange-500 text-orange-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'"
              class="py-4 px-1 border-b-2 font-medium text-sm transition-colors"
            >
              File Tree
            </button>
            <button
              @click="activeTab = 'mappings'; loadMappings()"
              :class="activeTab === 'mappings' ? 'border-orange-500 text-orange-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'"
              class="py-4 px-1 border-b-2 font-medium text-sm transition-colors"
            >
              Section Mappings
            </button>
            <button
              @click="activeTab = 'googlesheets'; loadGoogleSheetsStatus()"
              :class="activeTab === 'googlesheets' ? 'border-orange-500 text-orange-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'"
              class="py-4 px-1 border-b-2 font-medium text-sm transition-colors"
            >
              Google Sheets
            </button>
          </nav>
        </div>
      </div>

      <!-- Overview Tab -->
      <div x-show="activeTab === 'overview'">
        <!-- Course Configuration -->
        <div
          class="bg-white rounded-lg shadow-lg border border-orange-100 p-6 mb-6"
        >
          <h3 class="text-xl font-semibold mb-4 text-orange-800">
            üìñ Course Information
          </h3>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div class="bg-orange-50 rounded-lg p-4 border border-orange-200">
              <label class="block text-sm font-medium text-gray-700 mb-1"
                >Course Name</label
              >
              <p class="text-lg font-semibold text-orange-800">
                <%= config.course.name %>
              </p>
            </div>
            <div class="bg-orange-50 rounded-lg p-4 border border-orange-200">
              <label class="block text-sm font-medium text-gray-700 mb-1"
                >Term</label
              >
              <p class="text-lg font-semibold text-orange-800">
                <%= config.course.term %>
              </p>
            </div>
            <div class="bg-orange-50 rounded-lg p-4 border border-orange-200">
              <label class="block text-sm font-medium text-gray-700 mb-1"
                >Total <%= participantLabel %>s</label
              >
              <p class="text-lg font-semibold text-orange-800">
                <%= actualTotalStudents %>
              </p>
              <p class="text-xs text-gray-500 mt-1">
                (Calculated from all sections)
              </p>
            </div>
            <div class="bg-orange-50 rounded-lg p-4 border border-orange-200">
              <label class="block text-sm font-medium text-gray-700 mb-1"
                >Instructor</label
              >
              <p class="text-lg font-semibold text-orange-800">
                <%= config.course.instructor || 'Not specified' %>
              </p>
            </div>
          </div>
        </div>

        <!-- Sections Configuration -->
        <div
          class="bg-white rounded-lg shadow-lg border border-orange-100 p-6 mb-6"
        >
          <h3 class="text-xl font-semibold mb-4 text-orange-800">üìö Sections</h3>
          <div class="grid gap-4">
            <% config.sections.forEach(section => { %>
            <div class="bg-orange-50 rounded-lg p-4 border border-orange-200">
              <div class="grid grid-cols-1 md:grid-cols-4 gap-3">
                <div>
                  <label class="block text-sm font-medium text-gray-700"
                    >Section ID</label
                  >
                  <p class="font-semibold text-orange-800"><%= section.id %></p>
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-700"
                    ><%= facilitatorLabel %> Name</label
                  >
                  <p class="font-semibold text-orange-800">
                    <%= section.ta_name %>
                  </p>
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-700"
                    >Location</label
                  >
                  <p class="font-semibold text-orange-800">
                    <%= section.location %>
                  </p>
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-700"
                    ><%= participantLabel %>s</label
                  >
                  <p class="font-semibold text-orange-800">
                    <%= section.students.length %>
                  </p>
                </div>
              </div>
            </div>
            <% }); %>
          </div>
        </div>

        <!-- Scheduling Configuration -->
        <div
          class="bg-white rounded-lg shadow-lg border border-orange-100 p-6 mb-6"
        >
          <h3 class="text-xl font-semibold mb-4 text-orange-800">
            ‚è∞ Scheduling Settings
          </h3>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div class="bg-orange-50 rounded-lg p-4 border border-orange-200">
              <label class="block text-sm font-medium text-gray-700 mb-1"
                >Session Duration</label
              >
              <p class="text-lg font-semibold text-orange-800">
                <%= config.scheduling.exam_duration_minutes %> minutes
              </p>
            </div>
            <div class="bg-orange-50 rounded-lg p-4 border border-orange-200">
              <label class="block text-sm font-medium text-gray-700 mb-1"
                >Break Duration</label
              >
              <p class="text-lg font-semibold text-orange-800">
                <%= config.scheduling.break_duration_minutes ?? 0 %> minutes
              </p>
            </div>
            <div class="bg-orange-50 rounded-lg p-4 border border-orange-200">
              <label class="block text-sm font-medium text-gray-700 mb-1"
                >Schedule Frequency</label
              >
              <p class="text-lg font-semibold text-orange-800">
                Every <%= config.scheduling.schedule_frequency_weeks %> weeks
              </p>
            </div>
          </div>
        </div>

        <!-- Actions -->
        <div class="bg-white rounded-lg shadow-lg border border-orange-100 p-6">
          <h3 class="text-xl font-semibold mb-4 text-orange-800">üîß Actions</h3>
          <div class="flex flex-wrap gap-4">
            <a
              href="/"
              class="bg-gray-500 text-white px-6 py-3 rounded-lg hover:bg-gray-600 transition-colors duration-200 inline-block"
            >
              ‚Üê Back to Dashboard
            </a>
            <button
              @click="reloadConfig()"
              :disabled="reloadingConfig"
              class="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors duration-200 disabled:bg-gray-400"
            >
              <span x-show="!reloadingConfig">üîÑ Reload Config & CSV Data</span>
              <span x-show="reloadingConfig">Reloading...</span>
            </button>
            <a
              href="/auth/google"
              class="bg-orange-600 text-white px-6 py-3 rounded-lg hover:bg-orange-700 transition-colors duration-200 inline-block"
            >
              üîó Reauthenticate with Google
            </a>
          </div>
        </div>
      </div>

      <!-- File Tree Tab -->
      <div x-show="activeTab === 'filetree'" x-cloak>
        <div class="bg-white rounded-lg shadow-lg border border-orange-100 p-6">
          <h3 class="text-xl font-semibold mb-4 text-orange-800">üìÅ File Tree</h3>
          <div class="mb-4">
            <p class="text-sm text-gray-600 mb-2">Data Directory: <code class="bg-gray-100 px-2 py-1 rounded" x-text="fileTreePath"></code></p>
            <button
              @click="loadFileTree()"
              class="bg-orange-500 text-white px-4 py-2 rounded-lg hover:bg-orange-600 transition-colors duration-200"
            >
              üîÑ Refresh File Tree
            </button>
          </div>

          <div class="border border-gray-200 rounded-lg p-4 bg-gray-50">
            <div x-show="loadingFileTree" class="text-center py-4">
              <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500"></div>
              <p class="mt-2 text-gray-600">Loading file tree...</p>
            </div>

            <div x-show="!loadingFileTree && fileTreeError" class="text-red-600 text-center py-4">
              <p x-text="fileTreeError"></p>
            </div>

            <div x-show="!loadingFileTree && !fileTreeError && fileTree.length > 0">
              <template x-for="item in fileTree" :key="item.path">
                <div x-html="renderTreeItem(item, 0)"></div>
              </template>
            </div>
          </div>

          <!-- File Preview Modal -->
          <div x-show="showPreview" x-cloak class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" @click.self="showPreview = false">
            <div class="bg-white rounded-lg shadow-xl max-w-4xl max-h-3/4 w-full mx-4 overflow-hidden">
              <div class="bg-gray-50 px-6 py-4 border-b border-gray-200 flex justify-between items-center">
                <h3 class="text-lg font-semibold" x-text="previewFile.name"></h3>
                <button @click="showPreview = false" class="text-gray-400 hover:text-gray-600">
                  <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                </button>
              </div>
              <div class="p-6 overflow-auto max-h-96">
                <div x-show="loadingPreview" class="text-center py-8">
                  <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500"></div>
                  <p class="mt-2 text-gray-600">Loading preview...</p>
                </div>

                <div x-show="!loadingPreview && previewError" class="text-red-600 text-center py-8">
                  <p x-text="previewError"></p>
                </div>

                <!-- CSV Preview (Fixed) -->
                <div x-show="!loadingPreview && !previewError && previewData && previewData.type === 'csv'">
                  <div class="mb-4">
                    <p class="text-sm text-gray-600">
                      Showing <span x-text="(previewData && previewData.rows ? previewData.rows.length : 0)"></span> of <span x-text="(previewData && previewData.totalRows ? previewData.totalRows : 0)"></span> rows
                    </p>
                  </div>
                  <div class="overflow-x-auto">
                    <table class="min-w-full border border-gray-200 rounded-lg">
                      <thead class="bg-gray-50">
                        <tr>
                          <template x-for="header in (previewData && previewData.headers ? previewData.headers : [])" :key="header">
                            <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-b border-gray-200" x-text="header"></th>
                          </template>
                        </tr>
                      </thead>
                      <tbody class="bg-white divide-y divide-gray-200">
                        <template x-for="(row, index) in (previewData && previewData.rows ? previewData.rows : [])" :key="index">
                          <tr :class="index % 2 === 0 ? 'bg-white' : 'bg-gray-50'">
                            <template x-for="(cell, cellIndex) in row" :key="cellIndex">
                              <td class="px-4 py-2 text-sm text-gray-900 border-r border-gray-200 last:border-r-0" x-text="cell"></td>
                            </template>
                          </tr>
                        </template>
                      </tbody>
                    </table>
                  </div>
                </div>

                <!-- Text Preview -->
                <div x-show="!loadingPreview && !previewError && previewData && previewData.type === 'text'">
                  <pre class="bg-gray-100 p-4 rounded-lg text-sm overflow-auto" x-text="(previewData && previewData.content ? previewData.content : '')"></pre>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Section Mappings Tab -->
      <div x-show="activeTab === 'mappings'" x-cloak>
        <div class="bg-white rounded-lg shadow-lg border border-orange-100 p-6 mb-6">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-xl font-semibold text-orange-800">üìä Section Student Mappings</h3>
            <button
              @click="reloadConfig()"
              :disabled="reloadingConfig"
              class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors duration-200 disabled:bg-gray-400 text-sm"
            >
              <span x-show="!reloadingConfig">üîÑ Reload All Data</span>
              <span x-show="reloadingConfig">Reloading...</span>
            </button>
          </div>

            <div x-show="!loadingFileTree && !fileTreeError && fileTree.length === 0" class="text-gray-500 text-center py-4">
              <p>No files found in the data directory</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Section Mappings Tab -->
      <div x-show="activeTab === 'mappings'" x-cloak>
        <div class="bg-white rounded-lg shadow-lg border border-orange-100 p-6 mb-6">
          <h3 class="text-xl font-semibold mb-4 text-orange-800">üìä Section Student Mappings</h3>

          <!-- Current Config Mappings -->
          <div class="mb-6">
            <h4 class="text-lg font-semibold mb-3 text-gray-700">Current Configuration</h4>
            <div class="grid gap-3">
              <template x-for="mapping in configMappings" :key="mapping.sectionId">
                <div class="bg-orange-50 rounded-lg p-3 border border-orange-200">
                  <div class="flex justify-between items-center">
                    <div>
                      <span class="font-semibold" x-text="mapping.sectionId"></span> -
                      <span x-text="mapping.sectionName"></span>
                    </div>
                    <div class="flex items-center gap-3">
                      <span class="text-sm text-gray-600" x-text="`${mapping.studentCount} students`"></span>
                      <span x-show="mapping.hasConfigMapping" class="text-xs bg-green-100 text-green-800 px-2 py-1 rounded">Active</span>
                      <span x-show="!mapping.hasConfigMapping" class="text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded">No Mapping</span>
                    </div>
                  </div>
                </div>
              </template>
            </div>
          </div>

          <!-- Upload New Mapping -->
          <div class="mb-6">
            <h4 class="text-lg font-semibold mb-3 text-gray-700">Upload New Mapping</h4>
            <form @submit.prevent="uploadMapping()" class="border border-gray-200 rounded-lg p-4 bg-gray-50">
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1">Mapping Name</label>
                  <input
                    type="text"
                    x-model="newMapping.name"
                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500"
                    placeholder="e.g., Week 1 Students"
                    required
                  >
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1">Section</label>
                  <select
                    x-model="newMapping.sectionId"
                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500"
                    required
                  >
                    <option value="">Select a section...</option>
                    <template x-for="section in sections" :key="section.id">
                      <option :value="section.id" x-text="`${section.id} - ${section.name}`"></option>
                    </template>
                  </select>
                </div>
              </div>
              <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-1">CSV File</label>
                <input
                  type="file"
                  @change="newMapping.file = $event.target.files[0]"
                  accept=".csv"
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500"
                  required
                >
                <p class="text-xs text-gray-500 mt-1">CSV format: name,email,slack_id (header required)</p>
              </div>
              <button
                type="submit"
                :disabled="uploadingMapping"
                class="bg-orange-500 text-white px-6 py-2 rounded-lg hover:bg-orange-600 transition-colors duration-200 disabled:bg-gray-400"
              >
                <span x-show="!uploadingMapping">üì§ Upload Mapping</span>
                <span x-show="uploadingMapping">Uploading...</span>
              </button>
            </form>
          </div>

          <!-- Saved Mappings -->
          <div>
            <h4 class="text-lg font-semibold mb-3 text-gray-700">Saved Mappings</h4>
            <div x-show="loadingMappings" class="text-center py-4">
              <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500"></div>
            </div>
            <div x-show="!loadingMappings && savedMappings.length === 0" class="text-gray-500 text-center py-4 border border-gray-200 rounded-lg bg-gray-50">
              <p>No saved mappings found</p>
            </div>
            <div x-show="!loadingMappings && savedMappings.length > 0" class="space-y-3">
              <template x-for="mapping in savedMappings" :key="mapping.id">
                <div class="border border-gray-200 rounded-lg p-4 bg-white">
                  <div class="flex justify-between items-start">
                    <div>
                      <h5 class="font-semibold" x-text="mapping.name"></h5>
                      <p class="text-sm text-gray-600">
                        Section: <span x-text="mapping.section_id"></span> |
                        File: <span x-text="mapping.filename"></span>
                      </p>
                      <p class="text-xs text-gray-500 mt-1">
                        Uploaded by <span x-text="mapping.uploaded_by"></span> on
                        <span x-text="new Date(mapping.created_at).toLocaleDateString()"></span>
                      </p>
                    </div>
                    <div class="flex items-center gap-2">
                      <span x-show="mapping.is_active" class="text-xs bg-green-100 text-green-800 px-2 py-1 rounded">Active</span>
                      <button
                        x-show="!mapping.is_active"
                        @click="activateMapping(mapping.id, mapping.section_id)"
                        class="text-sm bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-600 transition-colors"
                      >
                        Activate
                      </button>
                      <button
                        @click="deleteMapping(mapping.id)"
                        class="text-sm bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600 transition-colors"
                      >
                        Delete
                      </button>
                    </div>
                  </div>
                </div>
              </template>
            </div>
          </div>
        </div>
      </div>

      <!-- Google Sheets Tab -->
      <div x-show="activeTab === 'googlesheets'">
        <div class="bg-white rounded-lg shadow-lg border border-orange-100 p-6 mb-6">
          <h3 class="text-xl font-semibold mb-4 text-orange-800">üìä Google Sheets Integration</h3>
          

          <!-- Current Configuration -->
          <div class="mb-6">
            <h4 class="text-lg font-semibold mb-3 text-gray-700">Current Configuration</h4>
            <div x-show="loadingGoogleSheets" class="text-center py-4">
              <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500"></div>
              <p class="mt-2 text-gray-600">Loading Google Sheets status...</p>
            </div>

            <div x-show="!loadingGoogleSheets" class="bg-orange-50 rounded-lg p-4 border border-orange-200">
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1">Status</label>
                  <p class="text-lg font-semibold" :class="googleSheetsStatus.configured ? 'text-green-800' : 'text-orange-800'">
                    <span x-show="googleSheetsStatus.configured">‚úÖ Configured</span>
                    <span x-show="!googleSheetsStatus.configured">‚ö†Ô∏è Not Configured</span>
                  </p>
                </div>
                <div x-show="googleSheetsStatus.configured">
                  <label class="block text-sm font-medium text-gray-700 mb-1">Spreadsheet URL</label>
                  <p class="text-sm text-gray-800 break-all" x-text="googleSheetsStatus.spreadsheetUrl || 'Not set'"></p>
                </div>
              </div>

              <div x-show="googleSheetsStatus.configured" class="mt-4">
                <label class="block text-sm font-medium text-gray-700 mb-2">Section Mappings</label>
                <div class="grid gap-2">
                  <template x-for="mapping in googleSheetsStatus.tabMappings" :key="mapping.sectionId">
                    <div class="flex justify-between items-center bg-white rounded p-2 border border-orange-200">
                      <span class="font-medium" x-text="mapping.sectionId"></span>
                      <span class="text-sm text-gray-600" x-text="`‚Üí ${mapping.tabName}`"></span>
                    </div>
                  </template>
                </div>
              </div>
            </div>
          </div>

          <!-- Setup New Spreadsheet -->
          <div class="mb-6">
            <h4 class="text-lg font-semibold mb-3 text-gray-700">Setup Google Sheets</h4>

            <!-- Create Template Option -->
            <div class="border border-gray-200 rounded-lg p-4 bg-gray-50 mb-4">
              <h5 class="font-semibold mb-2 text-gray-800">üÜï Create New Template Sheet</h5>
              <p class="text-sm text-gray-600 mb-3">Generate a new Google Sheet with proper tabs and sample data for all your sections.</p>
              <div class="flex items-center gap-3">
                <input
                  type="text"
                  x-model="newSheetTitle"
                  placeholder="Enter sheet title (e.g., 'Fall 2025 Students')"
                  class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500"
                >
                <button
                  @click="createTemplateSheet()"
                  :disabled="creatingTemplate || !newSheetTitle.trim()"
                  class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors duration-200 disabled:bg-gray-400"
                >
                  <span x-show="!creatingTemplate">üöÄ Create Template</span>
                  <span x-show="creatingTemplate">Creating...</span>
                </button>
              </div>
            </div>

            <!-- Use Existing Spreadsheet -->
            <div class="border border-gray-200 rounded-lg p-4 bg-gray-50">
              <h5 class="font-semibold mb-2 text-gray-800">üîó Connect Existing Sheet</h5>
              <p class="text-sm text-gray-600 mb-3">Connect to an existing Google Sheet. Make sure it has tabs named after your section IDs.</p>
              <div class="space-y-3">
                <input
                  type="url"
                  x-model="existingSheetUrl"
                  placeholder="Paste Google Sheets URL here..."
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500"
                >
                <div class="flex gap-3">
                  <button
                    @click="testSheetConnection()"
                    :disabled="testingConnection || !existingSheetUrl.trim()"
                    class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors duration-200 disabled:bg-gray-400"
                  >
                    <span x-show="!testingConnection">üîç Test Connection</span>
                    <span x-show="testingConnection">Testing...</span>
                  </button>
                  <button
                    @click="saveSheetConfiguration()"
                    :disabled="savingConfig || !existingSheetUrl.trim()"
                    class="bg-orange-600 text-white px-4 py-2 rounded-lg hover:bg-orange-700 transition-colors duration-200 disabled:bg-gray-400"
                  >
                    <span x-show="!savingConfig">üíæ Save Configuration</span>
                    <span x-show="savingConfig">Saving...</span>
                  </button>
                </div>
              </div>
            </div>
          </div>

          <!-- Connection Test Results -->
          <div x-show="connectionTestResult" class="mb-6">
            <div :class="connectionTestResult.success ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'" class="rounded-lg p-4 border">
              <h5 class="font-semibold mb-2" :class="connectionTestResult.success ? 'text-green-800' : 'text-red-800'">
                <span x-show="connectionTestResult.success">‚úÖ Connection Successful</span>
                <span x-show="!connectionTestResult.success">‚ùå Connection Failed</span>
              </h5>
              <p class="text-sm" :class="connectionTestResult.success ? 'text-green-700' : 'text-red-700'" x-text="connectionTestResult.message"></p>
              <div x-show="connectionTestResult.success && connectionTestResult.tabs" class="mt-3">
                <p class="text-sm font-medium text-green-700 mb-2">Available tabs:</p>
                <div class="flex flex-wrap gap-2">
                  <template x-for="tab in connectionTestResult.tabs" :key="tab">
                    <span class="bg-green-100 text-green-800 px-2 py-1 rounded text-xs" x-text="tab"></span>
                  </template>
                </div>
              </div>
            </div>
          </div>

          <!-- Sync Status -->
          <div x-show="googleSheetsStatus.configured" class="mb-6">
            <h4 class="text-lg font-semibold mb-3 text-gray-700">üìà Sync Status</h4>
            <div class="bg-blue-50 rounded-lg p-4 border border-blue-200">
              <div class="flex items-center justify-between">
                <div>
                  <p class="font-medium text-blue-800">Last Sync: <span x-text="googleSheetsStatus.lastSync || 'Never'"></span></p>
                  <p class="text-sm text-blue-700">Auto-refresh: Every <span x-text="googleSheetsStatus.autoRefreshMinutes || 15"></span> minutes</p>
                </div>
                <button
                  @click="forceSyncSheets()"
                  :disabled="syncingSheets"
                  class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors duration-200 disabled:bg-gray-400"
                >
                  <span x-show="!syncingSheets">üîÑ Force Sync Now</span>
                  <span x-show="syncingSheets">Syncing...</span>
                </button>
              </div>
            </div>
          </div>

          <!-- Embedded Sheet Viewer -->
          <div x-show="googleSheetsStatus.configured && googleSheetsStatus.spreadsheetUrl" class="mb-6">
            <h4 class="text-lg font-semibold mb-3 text-gray-700">üìã Sheet Editor</h4>
            <div class="border border-gray-200 rounded-lg overflow-hidden">
              <iframe
                :src="getEmbedUrl(googleSheetsStatus.spreadsheetUrl)"
                class="w-full h-96 border-0"
                frameborder="0"
                loading="lazy"
              ></iframe>
            </div>
            <p class="text-sm text-gray-600 mt-2">
              üí° You can edit the sheet directly above or
              <a :href="googleSheetsStatus.spreadsheetUrl" target="_blank" class="text-blue-600 hover:text-blue-800">open in Google Sheets</a>
            </p>
          </div>
        </div>
      </div>
    </div>

    <script>
      function configPanel() {
        return {
          activeTab: 'overview',
          fileTree: [],
          fileTreePath: '',
          fileTreeSource: null,
          loadingFileTree: false,
          fileTreeError: null,
          savedMappings: [],
          configMappings: [],
          sections: [],
          loadingMappings: false,
          uploadingMapping: false,
          newMapping: {
            name: '',
            sectionId: '',
            file: null
          },
          showPreview: false,
          previewFile: { name: '' },
          previewData: null,
          loadingPreview: false,
          previewError: null,
          reloadingConfig: false,

          // Google Sheets state
          loadingGoogleSheets: false,
          googleSheetsStatus: {
            configured: false,
            spreadsheetUrl: '',
            tabMappings: [],
            lastSync: null,
            autoRefreshMinutes: 15
          },
          newSheetTitle: '',
          creatingTemplate: false,
          existingSheetUrl: '',
          testingConnection: false,
          savingConfig: false,
          syncingSheets: false,
          connectionTestResult: null,

          async loadFileTree() {
            this.loadingFileTree = true;
            this.fileTreeError = null;

            try {
              const response = await fetch('/api/file-tree');
              const data = await response.json();

              if (data.success) {
                this.fileTree = data.tree;
                this.fileTreePath = data.path;
                this.fileTreeSource = data.source || 'local-filesystem';
              } else {
                this.fileTreeError = data.error || 'Failed to load file tree';
              }
            } catch (error) {
              this.fileTreeError = 'Error loading file tree: ' + error.message;
            } finally {
              this.loadingFileTree = false;
            }
          },

          renderTreeItem(item, depth) {
            const indent = depth * 20;
            const icon = item.type === 'directory' ? 'üìÅ' : 'üìÑ';

            if (item.type === 'directory') {
              let html = `<div style="margin-left: ${indent}px" class="py-1">`;
              html += `<span class="font-medium">${icon} ${item.name}/</span>`;
              html += '</div>';

              if (item.children && item.children.length > 0) {
                for (const child of item.children) {
                  html += this.renderTreeItem(child, depth + 1);
                }
              }

              return html;
            } else {
              const size = item.size < 1024 ? `${item.size} B` :
                          item.size < 1024 * 1024 ? `${(item.size / 1024).toFixed(1)} KB` :
                          `${(item.size / 1024 / 1024).toFixed(1)} MB`;

              const canPreview = item.name.toLowerCase().endsWith('.csv') ||
                               item.name.toLowerCase().endsWith('.txt') ||
                               item.name.toLowerCase().endsWith('.yml') ||
                               item.name.toLowerCase().endsWith('.yaml');

              // Escape paths for use in onclick attribute
              const escapedPath = item.path.replace(/'/g, "\\'").replace(/"/g, "&quot;");
              const escapedName = item.name.replace(/'/g, "\\'").replace(/"/g, "&quot;");

              return `<div style="margin-left: ${indent}px" class="py-1 text-sm flex items-center justify-between hover:bg-gray-100 rounded px-2">
                <div>
                  <span>${icon} ${item.name}</span>
                  <span class="text-gray-500 ml-2">(${size})</span>
                </div>
                ${canPreview ? `<button onclick="window.previewFileHandler('${escapedPath}', '${escapedName}')" class="text-blue-500 hover:text-blue-700 text-xs px-2 py-1 rounded border border-blue-300 hover:border-blue-500">üëÅÔ∏è Preview</button>` : ''}
              </div>`;
            }
          },

          async loadMappings() {
            this.loadingMappings = true;

            try {
              const response = await fetch('/api/section-mappings');
              const data = await response.json();

              if (data.success) {
                this.savedMappings = data.mappings;
                this.configMappings = data.configMappings;
                this.sections = data.sections;
              }
            } catch (error) {
              console.error('Error loading mappings:', error);
            } finally {
              this.loadingMappings = false;
            }
          },

          async uploadMapping() {
            if (!this.newMapping.file || !this.newMapping.sectionId || !this.newMapping.name) {
              alert('Please fill in all fields');
              return;
            }

            this.uploadingMapping = true;

            const formData = new FormData();
            formData.append('csvFile', this.newMapping.file);
            formData.append('sectionId', this.newMapping.sectionId);
            formData.append('name', this.newMapping.name);

            try {
              const response = await fetch('/api/section-mapping/upload', {
                method: 'POST',
                body: formData
              });

              const data = await response.json();

              if (data.success) {
                alert(`Mapping uploaded successfully! ${data.rowCount} students added.`);
                this.newMapping = { name: '', sectionId: '', file: null };
                await this.loadMappings();
              } else {
                alert('Upload failed: ' + data.error);
              }
            } catch (error) {
              alert('Error uploading mapping: ' + error.message);
            } finally {
              this.uploadingMapping = false;
            }
          },

          async activateMapping(mappingId, sectionId) {
            if (!confirm('Activate this mapping? It will replace the current active mapping for this section.')) {
              return;
            }

            try {
              const response = await fetch('/api/section-mapping/activate', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ mappingId, sectionId })
              });

              const data = await response.json();

              if (data.success) {
                alert('Mapping activated successfully!');
                await this.loadMappings();
              } else {
                alert('Failed to activate mapping: ' + data.error);
              }
            } catch (error) {
              alert('Error activating mapping: ' + error.message);
            }
          },

          async deleteMapping(mappingId) {
            if (!confirm('Are you sure you want to delete this mapping?')) {
              return;
            }

            try {
              const response = await fetch(`/api/section-mapping/${mappingId}`, {
                method: 'DELETE'
              });

              const data = await response.json();

              if (data.success) {
                alert('Mapping deleted successfully!');
                await this.loadMappings();
              } else {
                alert('Failed to delete mapping: ' + data.error);
              }
            } catch (error) {
              alert('Error deleting mapping: ' + error.message);
            }
          },

          async previewFile(filePath, fileName) {
            this.showPreview = true;
            this.previewFile = { name: fileName };
            this.loadingPreview = true;
            this.previewError = null;
            this.previewData = null;

            try {
              // Build the URL with the file path
              const url = `/api/file-preview/${encodeURIComponent(filePath)}`;
              console.log('Preview URL:', url);

              const response = await fetch(url);

              if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
              }

              const data = await response.json();
              console.log('Preview data received:', data);

              if (data.success) {
                this.previewData = data;
              } else {
                this.previewError = data.error || 'Failed to load file preview';
              }
            } catch (error) {
              console.error('Preview error:', error);
              this.previewError = 'Error loading file preview: ' + error.message;
            } finally {
              this.loadingPreview = false;
            }
          },

          async reloadConfig() {
            this.reloadingConfig = true;

            try {
              const response = await fetch('/api/config/reload', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
              });

              const data = await response.json();

              if (data.success) {
                alert('Configuration reloaded successfully! Please refresh the page to see changes.');
                // Optionally reload the current tab data
                if (this.activeTab === 'filetree') {
                  await this.loadFileTree();
                } else if (this.activeTab === 'mappings') {
                  await this.loadMappings();
                }
              } else {
                alert('Failed to reload configuration: ' + data.error);
              }
            } catch (error) {
              alert('Error reloading configuration: ' + error.message);
            } finally {
              this.reloadingConfig = false;
            }
          },

          // Google Sheets functions
          async loadGoogleSheetsStatus() {
            console.log('üîÑ Loading Google Sheets status...');
            this.loadingGoogleSheets = true;

            try {
              const response = await fetch('/api/google-sheets/status');
              
              if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
              }
              
              const data = await response.json();

              console.log('üìä Google Sheets API response:', data);

              if (data.success) {
                this.googleSheetsStatus = data.status;
                console.log('‚úÖ Google Sheets status loaded:', this.googleSheetsStatus);
              } else {
                console.error('Failed to load Google Sheets status:', data.error);
                // Set default status if API fails
                this.googleSheetsStatus = {
                  configured: false,
                  spreadsheetUrl: '',
                  tabMappings: [],
                  lastSync: null,
                  autoRefreshMinutes: 15
                };
              }
            } catch (error) {
              console.error('Error loading Google Sheets status:', error);
              // Set default status if API fails
              this.googleSheetsStatus = {
                configured: false,
                spreadsheetUrl: '',
                tabMappings: [],
                lastSync: null,
                autoRefreshMinutes: 15
              };
            } finally {
              this.loadingGoogleSheets = false;
              console.log('üèÅ Google Sheets loading complete');
            }
          },

          async createTemplateSheet() {
            if (!this.newSheetTitle.trim()) {
              alert('Please enter a sheet title');
              return;
            }

            this.creatingTemplate = true;

            try {
              const response = await fetch('/api/google-sheets/create-template', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ title: this.newSheetTitle })
              });

              const data = await response.json();

              if (data.success) {
                alert(`Template sheet created successfully!\n\nURL: ${data.spreadsheetUrl}\n\nThe sheet has been configured automatically.`);
                this.newSheetTitle = '';
                await this.loadGoogleSheetsStatus();
              } else {
                alert('Failed to create template sheet: ' + data.message);
              }
            } catch (error) {
              alert('Error creating template sheet: ' + error.message);
            } finally {
              this.creatingTemplate = false;
            }
          },

          async testSheetConnection() {
            if (!this.existingSheetUrl.trim()) {
              alert('Please enter a Google Sheets URL');
              return;
            }

            this.testingConnection = true;
            this.connectionTestResult = null;

            try {
              const response = await fetch('/api/google-sheets/test-connection', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ spreadsheetUrl: this.existingSheetUrl })
              });

              const data = await response.json();
              this.connectionTestResult = data;
            } catch (error) {
              this.connectionTestResult = {
                success: false,
                message: 'Error testing connection: ' + error.message
              };
            } finally {
              this.testingConnection = false;
            }
          },

          async saveSheetConfiguration() {
            if (!this.existingSheetUrl.trim()) {
              alert('Please enter a Google Sheets URL');
              return;
            }

            this.savingConfig = true;

            try {
              const response = await fetch('/api/google-sheets/configure', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ spreadsheetUrl: this.existingSheetUrl })
              });

              const data = await response.json();

              if (data.success) {
                alert('Google Sheets configuration saved successfully!');
                this.existingSheetUrl = '';
                this.connectionTestResult = null;
                await this.loadGoogleSheetsStatus();
              } else {
                alert('Failed to save configuration: ' + data.message);
              }
            } catch (error) {
              alert('Error saving configuration: ' + error.message);
            } finally {
              this.savingConfig = false;
            }
          },

          async forceSyncSheets() {
            this.syncingSheets = true;

            try {
              const response = await fetch('/api/google-sheets/sync', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
              });

              const data = await response.json();

              if (data.success) {
                alert(`Sync completed! Updated ${data.updatedSections} sections.`);
                await this.loadGoogleSheetsStatus();
              } else {
                alert('Sync failed: ' + data.message);
              }
            } catch (error) {
              alert('Error syncing sheets: ' + error.message);
            } finally {
              this.syncingSheets = false;
            }
          },

          getEmbedUrl(spreadsheetUrl) {
            if (!spreadsheetUrl) return '';

            // Extract spreadsheet ID from URL
            const idMatch = spreadsheetUrl.match(/\/spreadsheets\/d\/([a-zA-Z0-9-_]+)/);
            if (!idMatch) return '';

            const spreadsheetId = idMatch[1];
            return `https://docs.google.com/spreadsheets/d/${spreadsheetId}/edit?usp=sharing&widget=true&headers=false`;
          },

          init() {
            console.log('üöÄ Config panel initializing...');
            
            // Store reference to this component globally for access from dynamically generated HTML
            window.configPanelInstance = this;

            // Load initial data
            console.log('üìä Loading initial Google Sheets status...');
            this.loadGoogleSheetsStatus();

            // Load file tree on first visit to file tree tab
            this.$watch('activeTab', (value) => {
              console.log('üîÑ Tab changed to:', value);
              if (value === 'filetree' && this.fileTree.length === 0) {
                this.loadFileTree();
              } else if (value === 'googlesheets') {
                // Reload Google Sheets status when switching to that tab
                console.log('üìä Reloading Google Sheets status for tab switch...');
                this.loadGoogleSheetsStatus();
              } else if (value === 'mappings') {
                // Load mappings when switching to that tab
                console.log('üìä Loading section mappings...');
                this.loadMappings();
              }
            });
            
            console.log('‚úÖ Config panel initialized');
          }
        };
      }

      // Global function to handle file preview clicks from rendered HTML
      window.previewFileHandler = function(filePath, fileName) {
        // Use the stored reference set during init()
        if (window.configPanelInstance && window.configPanelInstance.previewFile) {
          window.configPanelInstance.previewFile(filePath, fileName);
        } else {
          console.error('Alpine component not initialized yet. Please try again.');
        }
      };
    </script>
  </body>
</html>