<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= participantLabel %> Management - Clementime</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script
      src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"
      defer
    ></script>
    <style>
      [x-cloak] {
        display: none !important;
      }
    </style>
  </head>
  <body class="bg-orange-50">
    <%- include('partials/navbar') %>

    <div class="container mx-auto p-6" x-data="studentManager()">
      <!-- Google Sheets Modal -->
      <div
        x-show="sheetModal.show"
        x-cloak
        class="fixed inset-0 z-50 overflow-hidden"
        @keydown.escape="closeSheetModal()"
      >
        <!-- Backdrop -->
        <div
          class="fixed inset-0 bg-black bg-opacity-75 transition-opacity"
          @click="closeSheetModal()"
        ></div>

        <!-- Modal Content -->
        <div
          class="fixed inset-4 md:inset-8 bg-white rounded-lg shadow-2xl flex flex-col"
        >
          <!-- Modal Header -->
          <div
            class="flex items-center justify-between p-4 border-b border-gray-200"
          >
            <h3 class="text-xl font-semibold text-gray-900">
              📊 Edit Google Sheet - <span x-text="sheetModal.sectionId"></span>
            </h3>
            <div class="flex items-center gap-2">
              <button
                @click="openSheetInNewTab({ googleSheetsUrl: sheetModal.url })"
                class="bg-indigo-500 text-white px-4 py-2 rounded-lg hover:bg-indigo-600 transition-colors duration-200 text-sm"
              >
                🔗 Open in New Tab
              </button>
              <button
                @click="closeSheetModal()"
                class="text-gray-500 hover:text-gray-700 text-2xl leading-none"
              >
                &times;
              </button>
            </div>
          </div>

          <!-- Iframe Container -->
          <div class="flex-1 p-4 bg-gray-50">
            <iframe
              :src="sheetModal.embedUrl"
              class="w-full h-full rounded border border-gray-300"
              frameborder="0"
            ></iframe>
          </div>

          <!-- Modal Footer -->
          <div
            class="flex items-center justify-between p-4 border-t border-gray-200"
          >
            <p class="text-sm text-gray-600">
              💡 Tip: Changes are saved automatically in Google Sheets. Click
              "Sync" when done to update the student list.
            </p>
            <button
              @click="closeSheetModal()"
              class="bg-gray-500 text-white px-6 py-2 rounded-lg hover:bg-gray-600 transition-colors duration-200"
            >
              Close
            </button>
          </div>
        </div>
      </div>

      <div
        class="bg-white rounded-lg shadow-lg border border-orange-100 p-6 mb-6"
      >
        <h2 class="text-2xl font-bold mb-4">👥 <%= participantLabel %> Management</h2>
        <p class="text-gray-600">
          Manage <%= participantLabel.toLowerCase() %> data for each section via Google Sheets
        </p>
      </div>

      <!-- Current Status -->
      <div
        class="bg-white rounded-lg shadow-lg border border-orange-100 p-6 mb-6"
      >
        <h3 class="text-xl font-semibold mb-4 text-orange-800">
          📊 Current Status
        </h3>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div class="bg-orange-50 rounded-lg p-4 border border-orange-200">
            <label class="block text-sm font-medium text-gray-700 mb-1"
              >Total <%= participantLabel %>s</label
            >
            <p class="text-2xl font-bold text-orange-800">
              <%= actualTotalStudents %>
            </p>
          </div>
          <div class="bg-orange-50 rounded-lg p-4 border border-orange-200">
            <label class="block text-sm font-medium text-gray-700 mb-1"
              >Sections</label
            >
            <p class="text-2xl font-bold text-orange-800">
              <%= config.sections.length %>
            </p>
          </div>
          <div class="bg-orange-50 rounded-lg p-4 border border-orange-200">
            <label class="block text-sm font-medium text-gray-700 mb-1"
              >CSV Files</label
            >
            <p
              class="text-2xl font-bold text-orange-800"
              x-text="csvFiles.length"
            ></p>
          </div>
        </div>
      </div>

      <!-- Upload New CSV -->
      <!-- <div
        class="bg-white rounded-lg shadow-lg border border-orange-100 p-6 mb-6"
      >
        <h3 class="text-xl font-semibold mb-4 text-orange-800">
          📤 Upload Student CSV
        </h3>
        <form @submit.prevent="uploadCsv()" class="space-y-4">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1"
                >Section</label
              >
              <select
                x-model="newCsv.sectionId"
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500"
                required
              >
                <option value="">Select a section...</option>
                <template x-for="section in sections" :key="section.id">
                  <option
                    :value="section.id"
                    x-text="`${section.id} - ${section.name}`"
                  ></option>
                </template>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1"
                >CSV File</label
              >
              <input
                type="file"
                @change="newCsv.file = $event.target.files[0]"
                accept=".csv"
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500"
                required
              />
            </div>
          </div>
          <div class="bg-blue-50 rounded-lg p-3 border border-blue-200">
            <p class="text-sm text-blue-800">
              <strong>CSV Format:</strong> name,email,slack_id (header row
              required)
            </p>
            <p class="text-xs text-blue-600 mt-1">
              Example: John Doe,john.doe@university.edu,U12345678
            </p>
          </div>
          <button
            type="submit"
            :disabled="uploading"
            class="bg-orange-500 text-white px-6 py-2 rounded-lg hover:bg-orange-600 transition-colors duration-200 disabled:bg-gray-400"
          >
            <span x-show="!uploading">📤 Upload CSV</span>
            <span x-show="uploading">Uploading...</span>
          </button>
        </form>
      </div> -->

      <!-- Current CSV Files -->
      <!-- <div
        class="bg-white rounded-lg shadow-lg border border-orange-100 p-6 mb-6"
      >
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-xl font-semibold text-orange-800">
            📁 Current CSV Files
          </h3>
          <button
            @click="loadFiles()"
            :disabled="loading"
            class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors duration-200 disabled:bg-gray-400 text-sm"
          >
            <span x-show="!loading">🔄 Refresh</span>
            <span x-show="loading">Loading...</span>
          </button>
        </div>

        <div x-show="loading" class="text-center py-4">
          <div
            class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500"
          ></div>
          <p class="mt-2 text-gray-600">Loading files...</p>
        </div>

        <div
          x-show="!loading && csvFiles.length === 0"
          class="text-gray-500 text-center py-8 border border-gray-200 rounded-lg bg-gray-50"
        >
          <p class="text-lg">No CSV files found</p>
          <p class="text-sm mt-1">Upload CSV files for your sections above</p>
        </div>

        <div x-show="!loading && csvFiles.length > 0" class="space-y-3">
          <template x-for="file in csvFiles" :key="file.name">
            <div class="border border-gray-200 rounded-lg p-4 bg-white">
              <div class="flex justify-between items-center">
                <div>
                  <h4 class="font-semibold" x-text="file.name"></h4>
                  <p class="text-sm text-gray-600">
                    Section: <span x-text="file.sectionId"></span> | Size:
                    <span x-text="formatFileSize(file.size)"></span> | Modified:
                    <span x-text="formatDate(file.modified)"></span>
                  </p>
                </div>
                <div class="flex items-center gap-2">
                  <span
                    class="text-xs bg-green-100 text-green-800 px-2 py-1 rounded"
                    >Active</span
                  >
                </div>
              </div>
            </div>
          </template>
        </div>
      </div> -->

      <!-- Section Overview -->
      <div
        class="bg-white rounded-lg shadow-lg border border-orange-100 p-6 mb-6"
      >
        <h3 class="text-xl font-semibold mb-4 text-orange-800">
          📚 Section Overview
        </h3>
        <div class="space-y-4">
          <template x-for="section in sections" :key="section.id">
            <div class="border border-gray-200 rounded-lg p-4 bg-white">
              <!-- Section Header -->
              <div class="flex justify-between items-center mb-3">
                <div>
                  <h4
                    class="font-semibold"
                    x-text="`${section.id} - ${section.name}`"
                  ></h4>
                  <p class="text-sm text-gray-600">
                    <%= participantLabel %>s:
                    <span x-text="section.studentCount"></span> 
                    <!-- | CSV File:
                    <span
                      :class="section.hasCsvFile ? 'text-green-600' : 'text-red-600'"
                      x-text="section.hasCsvFile ? 'Yes' : 'No'"
                    ></span> -->
                    <span x-show="section.googleSheetsUrl">
                      | Google Sheets:
                      <span class="text-blue-600">Connected</span></span
                    >
                  </p>
                </div>
                <div class="flex items-center gap-2">
                  <!-- <span
                    :class="section.hasCsvFile ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'"
                    class="text-xs px-2 py-1 rounded"
                    x-text="section.hasCsvFile ? 'Has CSV' : 'No CSV'"
                  ></span> -->
                  <span
                    x-show="section.googleSheetsUrl"
                    class="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded"
                    >Google Sheets</span
                  >
                </div>
              </div>

              <!-- Google Sheets Integration -->
              <div class="border-t border-gray-100 pt-3">
                <form
                  @submit.prevent="saveGoogleSheetsUrl(section)"
                  class="flex items-center gap-3"
                >
                  <div class="flex-1">
                    <label class="block text-sm font-medium text-gray-700 mb-1">
                      📊 Google Sheets URL
                    </label>
                    <input
                      type="url"
                      x-model="section.googleSheetsUrl"
                      placeholder="https://docs.google.com/spreadsheets/d/..."
                      class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 text-sm"
                    />
                    <p class="text-xs text-gray-500 mt-1">
                      Share the sheet as "Anyone with the link can view" and
                      paste the URL here
                    </p>
                  </div>
                  <div class="flex flex-col gap-2">
                    <div class="flex gap-2">
                      <button
                        type="submit"
                        :disabled="!section.googleSheetsUrl || section.savingSheets"
                        class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors duration-200 disabled:bg-gray-400 text-sm"
                      >
                        <span x-show="!section.savingSheets">💾 Save</span>
                        <span x-show="section.savingSheets">Saving...</span>
                      </button>
                      <button
                        type="button"
                        @click="syncGoogleSheets(section)"
                        :disabled="!section.googleSheetsUrl || section.syncingSheets"
                        class="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition-colors duration-200 disabled:bg-gray-400 text-sm"
                      >
                        <span x-show="!section.syncingSheets">🔄 Sync</span>
                        <span x-show="section.syncingSheets">Syncing...</span>
                      </button>
                    </div>
                    <div class="flex gap-2" x-show="section.googleSheetsUrl">
                      <button
                        type="button"
                        @click="openSheetInModal(section)"
                        class="bg-purple-500 text-white px-4 py-2 rounded-lg hover:bg-purple-600 transition-colors duration-200 text-sm"
                      >
                        📝 Edit
                      </button>
                      <button
                        type="button"
                        @click="openSheetInNewTab(section)"
                        class="bg-indigo-500 text-white px-4 py-2 rounded-lg hover:bg-indigo-600 transition-colors duration-200 text-sm"
                      >
                        🔗 Open
                      </button>
                    </div>
                  </div>
                </form>
              </div>
            </div>
          </template>
        </div>
      </div>

      <!-- Actions -->
      <!-- <div class="bg-white rounded-lg shadow-lg border border-orange-100 p-6">
        <h3 class="text-xl font-semibold mb-4 text-orange-800">🔧 Actions</h3>
        <div class="flex flex-wrap gap-4">
          <a
            href="/"
            class="bg-gray-500 text-white px-6 py-3 rounded-lg hover:bg-gray-600 transition-colors duration-200 inline-block"
          >
            ← Back to Dashboard
          </a>
          <button
            @click="reloadData()"
            :disabled="reloading"
            class="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors duration-200 disabled:bg-gray-400"
          >
            <span x-show="!reloading">🔄 Reload Student Data</span>
            <span x-show="reloading">Reloading...</span>
          </button>
        </div>
      </div>
    </div> -->

    <script>
      function studentManager() {
        return {
          sections: [],
          csvFiles: [],
          loading: false,
          uploading: false,
          reloading: false,
          newCsv: {
            sectionId: "",
            file: null,
          },
          sheetModal: {
            show: false,
            url: "",
            embedUrl: "",
            sectionId: "",
          },

          async init() {
            console.log("🚀 Student manager initializing...");
            await this.loadFiles();
          },

          async loadFiles() {
            this.loading = true;
            try {
              const response = await fetch("/api/students/files");
              const data = await response.json();

              if (data.success) {
                // Preserve the existing Google Sheets URLs from the loaded data
                this.sections = data.sections.map((section) => ({
                  ...section,
                  googleSheetsUrl: section.googleSheetsUrl || "",
                  savingSheets: false,
                  syncingSheets: false,
                }));
                this.csvFiles = data.files;
                console.log("✅ Files loaded:", data);
              } else {
                console.error("Failed to load files:", data.error);
                alert("Failed to load files: " + data.error);
              }
            } catch (error) {
              console.error("Error loading files:", error);
              alert("Error loading files: " + error.message);
            } finally {
              this.loading = false;
            }
          },

          async uploadCsv() {
            if (!this.newCsv.file || !this.newCsv.sectionId) {
              alert("Please select a section and CSV file");
              return;
            }

            this.uploading = true;

            const formData = new FormData();
            formData.append("csvFile", this.newCsv.file);
            formData.append("sectionId", this.newCsv.sectionId);

            try {
              const response = await fetch("/api/students/upload", {
                method: "POST",
                body: formData,
              });

              const data = await response.json();

              if (data.success) {
                alert("CSV file uploaded successfully!");
                this.newCsv = { sectionId: "", file: null };
                await this.loadFiles();
              } else {
                alert("Upload failed: " + data.error);
              }
            } catch (error) {
              alert("Error uploading file: " + error.message);
            } finally {
              this.uploading = false;
            }
          },

          async reloadData() {
            this.reloading = true;

            try {
              const response = await fetch("/api/students/reload", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
              });

              const data = await response.json();

              if (data.success) {
                alert(
                  `Student data reloaded successfully!\n\nTotal students: ${data.totalStudents}\nUpdated sections: ${data.sections.length}`
                );
                await this.loadFiles();
              } else {
                alert("Failed to reload data: " + data.error);
              }
            } catch (error) {
              alert("Error reloading data: " + error.message);
            } finally {
              this.reloading = false;
            }
          },

          formatFileSize(bytes) {
            if (bytes < 1024) return bytes + " B";
            if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + " KB";
            return (bytes / 1024 / 1024).toFixed(1) + " MB";
          },

          formatDate(dateString) {
            return new Date(dateString).toLocaleDateString();
          },

          async saveGoogleSheetsUrl(section) {
            if (!section.googleSheetsUrl) {
              alert("Please enter a Google Sheets URL");
              return;
            }

            section.savingSheets = true;

            try {
              const response = await fetch("/api/students/google-sheets/save", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  sectionId: section.id,
                  googleSheetsUrl: section.googleSheetsUrl,
                }),
              });

              const data = await response.json();

              if (data.success) {
                // Show success without reloading - the URL is already saved
                console.log("✅ Google Sheets URL saved successfully!");
                // Update the local data without a full reload
                const sectionIndex = this.sections.findIndex(
                  (s) => s.id === section.id
                );
                if (sectionIndex !== -1) {
                  this.sections[sectionIndex].googleSheetsUrl =
                    section.googleSheetsUrl;
                }
                // Show a brief success message
                const successMsg = document.createElement("div");
                successMsg.className =
                  "fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50";
                successMsg.textContent = "✅ URL saved successfully!";
                document.body.appendChild(successMsg);
                setTimeout(() => successMsg.remove(), 3000);
              } else {
                alert("Failed to save Google Sheets URL: " + data.error);
              }
            } catch (error) {
              alert("Error saving Google Sheets URL: " + error.message);
            } finally {
              section.savingSheets = false;
            }
          },

          async syncGoogleSheets(section) {
            if (!section.googleSheetsUrl) {
              alert("Please enter a Google Sheets URL first");
              return;
            }

            section.syncingSheets = true;
            // Store the URL before any operations
            const currentUrl = section.googleSheetsUrl;

            try {
              // First, save the URL if it's not already saved
              const saveResponse = await fetch(
                "/api/students/google-sheets/save",
                {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify({
                    sectionId: section.id,
                    googleSheetsUrl: currentUrl,
                  }),
                }
              );

              const saveData = await saveResponse.json();
              if (!saveData.success) {
                alert("Failed to save Google Sheets URL: " + saveData.error);
                section.syncingSheets = false;
                return;
              }

              // Now sync the data
              const response = await fetch("/api/students/google-sheets/sync", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  sectionId: section.id,
                  googleSheetsUrl: currentUrl,
                }),
              });

              const data = await response.json();

              if (data.success) {
                // Show success message
                const successMsg = document.createElement("div");
                successMsg.className =
                  "fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50";
                successMsg.innerHTML = `✅ Synced ${data.studentCount} students from Google Sheets!`;
                document.body.appendChild(successMsg);
                setTimeout(() => successMsg.remove(), 5000);

                // Reload files but preserve the URL
                await this.loadFiles();

                // Make sure the URL is still in the textbox after reload
                const updatedSection = this.sections.find(
                  (s) => s.id === section.id
                );
                if (updatedSection && !updatedSection.googleSheetsUrl) {
                  updatedSection.googleSheetsUrl = currentUrl;
                }
              } else {
                alert("Failed to sync Google Sheets: " + data.error);
              }
            } catch (error) {
              alert("Error syncing Google Sheets: " + error.message);
            } finally {
              section.syncingSheets = false;
              // Restore the URL in case it was cleared
              section.googleSheetsUrl = currentUrl;
            }
          },

          openSheetInModal(section) {
            if (!section.googleSheetsUrl) {
              alert("No Google Sheets URL configured for this section");
              return;
            }

            // Extract the spreadsheet ID from the URL
            const match = section.googleSheetsUrl.match(
              /\/spreadsheets\/d\/([a-zA-Z0-9-_]+)/
            );
            if (!match) {
              alert("Invalid Google Sheets URL format");
              return;
            }

            const spreadsheetId = match[1];
            // Create an embed URL that allows editing
            const embedUrl = `https://docs.google.com/spreadsheets/d/${spreadsheetId}/edit?usp=sharing&rm=minimal`;

            this.sheetModal = {
              show: true,
              url: section.googleSheetsUrl,
              embedUrl: embedUrl,
              sectionId: section.id,
            };
          },

          closeSheetModal() {
            this.sheetModal.show = false;
            // Optional: Reload data after closing modal to reflect any changes
            // this.loadFiles();
          },

          openSheetInNewTab(section) {
            if (!section.googleSheetsUrl) {
              alert("No Google Sheets URL configured for this section");
              return;
            }

            // Open the Google Sheet in a new tab
            window.open(section.googleSheetsUrl, "_blank");
          },
        };
      }
    </script>
  </body>
</html>
