name: 🍊 ClemenTime CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: shawntz/clementime

jobs:
  # Test job to ensure code quality before deployment
  test:
    name: 🧪 Test & Validate
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🔍 Run TypeScript checks
      run: npm run typecheck

    - name: 🧹 Run linting
      run: npm run lint

    - name: ✅ Run tests
      run: npm test

    - name: 🛡️ Validate configuration
      run: npm run validate

  # Build and push Docker image
  docker:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 📊 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to staging on develop branch
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to staging
      run: |
        echo "🎯 Deploying ClemenTime to staging environment..."
        echo "🐳 Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop"
        echo "📝 Would run deployment scripts here"
        # Add your staging deployment commands here
        # Example: kubectl set image deployment/clementime clementime=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop

  # Deploy to production on main branch or tags
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    environment: production

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🌟 Deploy to production
      run: |
        echo "🎯 Deploying ClemenTime to production environment..."
        echo "🐳 Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "📝 Would run deployment scripts here"
        # Add your production deployment commands here
        # Example: kubectl set image deployment/clementime clementime=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  # Create GitHub release on version tags
  release:
    name: 📦 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📝 Generate changelog
      id: changelog
      run: |
        echo "## 🍊 ClemenTime Release $(echo ${{ github.ref }} | sed 's/refs\/tags\///g')" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### 🚀 What's New" >> CHANGELOG.md
        echo "- Universal scheduling automation platform" >> CHANGELOG.md
        echo "- Docker containerization with one-command deployment" >> CHANGELOG.md
        echo "- AI recording integration (Fireflies.ai, Otter.ai, Grain)" >> CHANGELOG.md
        echo "- Comprehensive Google Calendar and Slack integration" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### 🐳 Docker Images" >> CHANGELOG.md
        echo "- \`docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$(echo ${{ github.ref }} | sed 's/refs\/tags\///g')\`" >> CHANGELOG.md
        echo "- \`docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### 📖 Documentation" >> CHANGELOG.md
        echo "- [Complete Setup Guide](https://github.com/shawntz/clementime/blob/main/SETUP_GUIDE.md)" >> CHANGELOG.md
        echo "- [AI Recording Setup](https://github.com/shawntz/clementime/blob/main/AI_RECORDING_SETUP.md)" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "---" >> CHANGELOG.md
        echo "*Made with ❤️ by [@shawntz](https://github.com/shawntz)*" >> CHANGELOG.md

    - name: 📦 Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: 🍊 ClemenTime ${{ github.ref }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false

  # Security scan
  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name != 'pull_request'

    steps:
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📤 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Notification job
  notify:
    name: 📢 Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()

    steps:
    - name: 📢 Notify deployment status
      run: |
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "🎉 ClemenTime successfully deployed to production!"
          echo "🐳 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        elif [ "${{ needs.deploy-staging.result }}" == "success" ]; then
          echo "🎯 ClemenTime successfully deployed to staging!"
          echo "🐳 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop"
        else
          echo "❌ Deployment failed or skipped"
        fi
        echo "📊 View deployment status: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"