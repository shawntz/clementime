name: Release and Publish

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Read version bump type
        id: version_bump
        run: |
          if [ -f .version-bump ]; then
            BUMP_TYPE=$(cat .version-bump | tr -d '[:space:]')
            echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
            echo "Version bump type: $BUMP_TYPE"
          else
            echo "bump_type=patch" >> $GITHUB_OUTPUT
            echo "Version bump type: patch (default)"
          fi

      - name: Get latest tag
        id: get_tag
        run: |
          # Get all tags matching semantic versioning pattern (vX.Y.Z)
          # Sort them and get the latest one, default to v0.0.0 if no tags exist
          LATEST_TAG=$(git tag -l "v[0-9]*.[0-9]*.[0-9]*" | sort -V | tail -n 1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0.0"
          fi
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Calculate new version
        id: calc_version
        run: |
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          BUMP_TYPE="${{ steps.version_bump.outputs.bump_type }}"

          # Remove 'v' prefix and split into array
          VERSION=${LATEST_TAG#v}
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION"

          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}

          # Increment based on bump type
          case $BUMP_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch|*)
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"

          # Check if tag already exists and increment patch if it does
          while git rev-parse "$NEW_VERSION" >/dev/null 2>&1; do
            echo "Tag $NEW_VERSION already exists, incrementing..."
            PATCH=$((PATCH + 1))
            NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          done

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.calc_version.outputs.new_version }}
          release_name: Release ${{ steps.calc_version.outputs.new_version }}
          body: |
            ## Changes in ${{ steps.calc_version.outputs.new_version }}

            üçä Automated release from main branch

            ### What's Changed
            - See commit history for detailed changes

            ### Docker Image
            ```bash
            docker pull shawnschwartz/clementime:${{ steps.calc_version.outputs.new_version }}
            docker pull shawnschwartz/clementime:latest
            ```

            üê≥ **Docker Hub**: https://hub.docker.com/r/shawnschwartz/clementime

            ---
            Made with ‚ù§Ô∏è by [@shawntz](https://github.com/shawntz)
          draft: false
          prerelease: false

      - name: Update VERSION file
        run: |
          echo "${{ steps.calc_version.outputs.new_version }}" > VERSION
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add VERSION
          git commit -m "chore: update VERSION to ${{ steps.calc_version.outputs.new_version }} [skip ci]" || true

      - name: Reset version bump file
        if: always()
        run: |
          if [ -f .version-bump ]; then
            echo "patch" > .version-bump
            git add .version-bump
            git commit -m "chore: reset version bump to patch [skip ci]" || true
          fi
          git push || true

    outputs:
      version: ${{ steps.calc_version.outputs.new_version }}

  docker:
    needs: release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract version
        id: version
        run: |
          VERSION="${{ needs.release.outputs.version }}"
          VERSION_NO_V=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_no_v=$VERSION_NO_V" >> $GITHUB_OUTPUT

      - name: Create VERSION file
        run: |
          echo "${{ needs.release.outputs.version }}" > VERSION

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            shawnschwartz/clementime:${{ steps.version.outputs.version_no_v }}
            shawnschwartz/clementime:latest
          cache-from: type=registry,ref=shawnschwartz/clementime:latest
          cache-to: type=inline
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ needs.release.outputs.version }}

      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: shawnschwartz/clementime
          short-description: "üçä Clementime - Oral Exam Scheduling and Management System"
          readme-filepath: ./README.md
