# Multi-stage build for Google Cloud Run
# Optimized for production deployment with session persistence

# Stage 1: Build stage
FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Install Python and build tools needed for native modules like better-sqlite3
RUN apk add --no-cache python3 make g++ curl

# Copy package files
COPY package*.json ./

# Install all dependencies
RUN npm ci

# Copy TypeScript configuration and source code
COPY tsconfig.json ./
COPY src/ ./src/

# Build the application
RUN npm run build

# Stage 2: Production stage
FROM node:20-alpine AS production

# Set working directory
WORKDIR /app

# Install runtime dependencies and SQLite tools
RUN apk add --no-cache python3 make g++ curl sqlite

# Copy package files
COPY package*.json ./

# Install only production dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy built application from builder stage
COPY --from=builder /app/dist ./dist

# Copy EJS views and static files (needed at runtime)
COPY src/web/views ./src/web/views
COPY src/web/public ./src/web/public

# Copy any config files that might be needed
COPY config*.yml ./

# Copy startup script
COPY gcloud-startup.sh ./gcloud-startup.sh
RUN chmod +x ./gcloud-startup.sh

# Create directories for runtime files with proper permissions
RUN mkdir -p /app/data /app/config /app/logs && \
    chown -R node:node /app

# Switch to non-root user
USER node

# Expose port (Cloud Run uses PORT environment variable)
EXPOSE 3000

# Health check for Cloud Run
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:${PORT:-3000}/health || exit 1

# Use startup script that handles environment variable decoding
CMD ["./gcloud-startup.sh"]